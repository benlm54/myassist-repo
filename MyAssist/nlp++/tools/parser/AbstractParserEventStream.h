#ifndef ABSTRACTPARSEREVENTSTREAM
#define ABSTRACTPARSEREVENTSTREAM

#include "Parse.h"
#include "../tools/util/AbstractEventStream.h"
#include "../tools/chunker/ChunkerContextGenerator.h"
#include "../tools/postag/POSContextGenerator.h"
#include "HeadRules.h"
#include "ParserEventTypeEnum.h"
#include "../tools/dictionary/Dictionary.h"
#include "../tools/util/ObjectStream.h"
#include "../model/Event.h"
#include "AbstractEventStream<Parse>.h"
#include <string>
#include <vector>

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreemnets.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace opennlp
{
    namespace tools
    {
        namespace parser
        {


            using opennlp::model::Event;
            using opennlp::tools::chunker::ChunkerContextGenerator;
            using opennlp::tools::dictionary::Dictionary;
            using opennlp::tools::parser::chunking::Parser;
            using opennlp::tools::postag::DefaultPOSContextGenerator;
            using opennlp::tools::postag::POSContextGenerator;
            using opennlp::tools::util::ObjectStream;

            /// <summary>
            /// Abstract class extended by parser event streams which perform tagging and chunking.
            /// </summary>
            class AbstractParserEventStream : public opennlp::tools::util::AbstractEventStream<Parse*>
            {

          private:
              ChunkerContextGenerator *chunkerContextGenerator;
              POSContextGenerator *tagContextGenerator;
          protected:
              HeadRules *rules;
              Set<std::string> *punctSet;

              /// <summary>
              /// The type of events being generated by this event stream.
              /// </summary>
              ParserEventTypeEnum etype;
              bool fixPossesives;
              Dictionary *dict;

          public:
              AbstractParserEventStream(ObjectStream<Parse*> *d, HeadRules *rules, ParserEventTypeEnum etype, Dictionary *dict);

          protected:
              virtual Iterator<Event*> *createEvents(Parse *sample);

              virtual void init();

          public:
//JAVA TO C++ CONVERTER TODO TASK: Calls to same-class constructors are not supported in C++ prior to C++11:
              AbstractParserEventStream(ObjectStream<Parse*> *d, HeadRules *rules, ParserEventTypeEnum etype); //this(d,rules,etype,nullptr);

              static Parse *getInitialChunks(Parse *p);

          private:
              static void getInitialChunks(Parse *p, std::vector<Parse*> &ichunks);

              /// <summary>
              /// Produces all events for the specified sentence chunks
              /// and adds them to the specified list. </summary>
              /// <param name="newEvents"> A list of events to be added to. </param>
              /// <param name="chunks"> Pre-chunked constituents of a sentence. </param>
          protected:
              virtual void addParseEvents(std::vector<Event*> &newEvents, Parse chunks[]) = 0;

          private:
              void addChunkEvents(std::vector<Event*> &chunkEvents, Parse chunks[]);

              void addTagEvents(std::vector<Event*> &tagEvents, Parse chunks[]);

              /// <summary>
              /// Returns true if the specified child is the last child of the specified parent. </summary>
              /// <param name="child"> The child parse. </param>
              /// <param name="parent"> The parent parse. </param>
              /// <returns> true if the specified child is the last child of the specified parent; false otherwise. </returns>
          protected:
              virtual bool lastChild(Parse *child, Parse *parent);

            };

        }
    }
}


#endif	//#ifndef ABSTRACTPARSEREVENTSTREAM
